name: "Update ECS Service"
description: "Composite action to patch image, register new task definition, and update ECS service."
inputs:
  aws_region:
    description: 'AWS region'
    required: true
  ecr_registry:
    description: 'ECR registry URI'
    required: true
  ecr_repository:
    description: 'ECR repository name'
    required: true
  cluster:
    description: 'ECS cluster name'
    required: true
  service:
    description: 'ECS service name'
    required: true
  image_tag:
    description: 'Image tag to deploy'
    required: true
  container_name:
    description: 'Container name in task definition'
    required: true
runs:
  using: "composite"
  steps:
    - name: Fetch current Task Definition ARN
      id: fetch-td
      shell: bash
      run: |
        arn=$(aws ecs describe-services \
          --cluster "$INPUT_CLUSTER" \
          --services "$INPUT_SERVICE" \
          --region "$INPUT_AWS_REGION" \
          --query 'services[0].taskDefinition' \
          --output text)
        echo "TD_ARN=$arn" >> $GITHUB_OUTPUT

    - name: Describe Task Definition
      shell: bash
      run: |
        aws ecs describe-task-definition \
          --task-definition "${{ steps.fetch-td.outputs.TD_ARN }}" \
          --region "$INPUT_AWS_REGION" \
          --output json > task-def.json

    - name: Patch image in Task Definition
      shell: bash
      run: |
        NEW_IMAGE="$INPUT_ECR_REGISTRY/$INPUT_ECR_REPOSITORY:$INPUT_IMAGE_TAG"
        jq --arg img "$NEW_IMAGE" '
          .taskDefinition as $td
          | (
              {
                family:                  $td.family,
                executionRoleArn:        $td.executionRoleArn,
                networkMode:             $td.networkMode,
                containerDefinitions:    (
                  $td.containerDefinitions
                  | map(if .name=="$INPUT_CONTAINER_NAME" then .image=$img else . end)
                ),
                requiresCompatibilities: $td.requiresCompatibilities,
                cpu:                     $td.cpu,
                memory:                  $td.memory
              }
            )
          | if $td.taskRoleArn then . + { taskRoleArn: $td.taskRoleArn } else . end
        ' task-def.json > new-task-def.json

    - name: Register new Task Definition
      id: register
      shell: bash
      run: |
        new_arn=$(aws ecs register-task-definition \
          --cli-input-json "file://new-task-def.json" \
          --region "$INPUT_AWS_REGION" \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "NEW_ARN=$new_arn" >> $GITHUB_OUTPUT

    - name: Update ECS Service
      id: update
      shell: bash
      run: |
        svc_arn=$(aws ecs update-service \
          --cluster "$INPUT_CLUSTER" \
          --service "$INPUT_SERVICE" \
          --task-definition "${{ steps.register.outputs.NEW_ARN }}" \
          --force-new-deployment \
          --region "$INPUT_AWS_REGION" \
          --query 'service.serviceArn' \
          --output text)
        echo "SERVICE_ARN=$svc_arn" >> $GITHUB_OUTPUT

    - name: Wait for service stability
      shell: bash
      run: |
        aws ecs wait services-stable \
          --cluster "$INPUT_CLUSTER" \
          --services "$INPUT_SERVICE" \
          --region "$INPUT_AWS_REGION"
    
    - name: Verify deployment
      id: verify
      shell: bash
      run: |
        # get desired vs running counts
        counts=$(aws ecs describe-services \
          --cluster "$INPUT_CLUSTER" \
          --services "$INPUT_SERVICE" \
          --region "$INPUT_AWS_REGION" \
          --query 'services[0].[desiredCount,runningCount]' \
          --output text)
        desired=$(echo $counts | cut -f1)
        running=$(echo $counts | cut -f2)
        echo "Desired: $desired, Running: $running" 
        if [ "$desired" != "$running" ]; then
          echo "::error ::Deployment incomplete: $running/$desired running"
          exit 1
        fi
        echo "::notice ::Deployment successful: $running/$desired tasks running"
        echo "RUNNING_COUNT=$running" >> $GITHUB_OUTPUT
        echo "DESIRED_COUNT=$desired" >> $GITHUB_OUTPUT

    - name: Confirmation
      shell: bash
      run: |
        echo "Deployed $INPUT_ECR_REGISTRY/$INPUT_ECR_REPOSITORY:$INPUT_IMAGE_TAG"
        echo "   Service is stable with ${{ steps.verify.outputs.RUNNING_COUNT }}/\${{ steps.verify.outputs.DESIRED_COUNT }} tasks running"