name: CI

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize]
    paths:
      - 'app/**'
  workflow_dispatch:

env:
  AWS_REGION:     ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECR_REGISTRY:      ${{ vars.ECR_REGISTRY }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Compose and test health
        run: |
          cd app
          docker-compose up -d --build
          echo "⏳ Waiting for app to become healthy..."
          if ! timeout 15s bash -c 'until curl -sf http://localhost:3000/health; do sleep 3; done'; then
            echo "App failed health check"
            docker-compose logs
            docker-compose down
            exit 1
          fi
          echo "App is healthy"
          docker-compose down

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - id: build
        name: Build and tag Docker image
        run: |
          # Use run number and commit SHA for image tag
          IMAGE_TAG="${{ github.run_number }}"
          echo "Building image with tag $IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.build.outputs.image_tag }}
          
      - name: Confirm push
        run: |
          echo "Built and pushed image $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.build.outputs.image_tag }} to ECR"
