name: CD

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: false

env:
  AWS_REGION:     ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECR_REGISTRY:      ${{ vars.ECR_REGISTRY }}
  ECS_CLUSTER:    assessment-ecs-cluster
  ECS_SERVICE:    assessment-app-service
  GH_TOKEN:       ${{ secrets.GITHUB_TOKEN }}

permissions:
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.image_tag }}" != "" ]]; then
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            TAG=$(gh run list \
              -R ${{ github.repository }} \
              --workflow CI.yml \
              --branch main \
              --event pull_request \
              --limit 1 \
              --json runNumber,headSha \
              | jq -r '.[0] | "\(.runNumber)-\(.headSha)"')
            echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Describe current Task Definition
        id: describe
        env:
          AWS_REGION:  ${{ secrets.AWS_REGION }}
          ECS_SERVICE: ${{ env.ECS_SERVICE }}
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_SERVICE \
            --region $AWS_REGION \
            --output json \
            > task-def.json

      - name: Patch container image in Task Definition
        id: patch
        env:
          ECR_REGISTRY:   ${{ vars.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG:      ${{ steps.tag.outputs.IMAGE_TAG }}
        run: |
          NEW_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          jq --arg img "$NEW_IMAGE" '
            .taskDefinition
            | { 
                family: .family,
                taskRoleArn: .taskRoleArn,
                executionRoleArn: .executionRoleArn,
                networkMode: .networkMode,
                containerDefinitions: (
                  .containerDefinitions 
                  | map(if .name=="app" then .image=$img else . end)
                ),
                requiresCompatibilities: .requiresCompatibilities,
                cpu: .cpu,
                memory: .memory
              }
          ' task-def.json > new-task-def.json

      - name: Register new Task Definition revision
        id: register
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --region $AWS_REGION \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text \
            > new-task-arn.txt

      - name: Update ECS Service to new revision
        env:
          AWS_REGION:  ${{ secrets.AWS_REGION }}
          ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
          ECS_SERVICE: ${{ env.ECS_SERVICE }}
        run: |
          NEW_ARN=$(cat new-task-arn.txt)
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition "$NEW_ARN" \
            --force-new-deployment \
            --region $AWS_REGION

      - name: Confirm deployment
        run: |
          echo "Deployed $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.tag.outputs.IMAGE_TAG }} to $ECS_SERVICE"
