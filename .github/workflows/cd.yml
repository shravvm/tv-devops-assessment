name: CD

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: false

env:
  AWS_REGION:     ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECR_REGISTRY:      ${{ vars.ECR_REGISTRY }}
  ECS_CLUSTER:    assessment-ecs-cluster
  ECS_SERVICE:    assessment-app-service
  GH_TOKEN:       ${{ secrets.GITHUB_TOKEN }}

permissions:
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.image_tag }}" != "" ]]; then
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            TAG=$(gh run list \
              -R ${{ github.repository }} \
              --workflow CI.yml \
              --branch main \
              --event pull_request \
              --limit 1 \
              --json runNumber,headSha \
              | jq -r '.[0] | "\(.runNumber)-\(.headSha)"')
            echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Fetch current TD ARN
        id: fetch-td
        run: |
          arn=$(aws ecs describe-services \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --region "$AWS_REGION" \
            --query 'services[0].taskDefinition' \
            --output text)
          echo "TD_ARN=$arn" >> $GITHUB_OUTPUT

      # Dump that TD JSON locally
      - name: Describe Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ steps.fetch-td.outputs.TD_ARN }}" \
            --region "$AWS_REGION" \
            --output json \
            > task-def.json

      # Patch the container's image field
      - name: Patch image in Task Definition
        run: |
          NEW_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          jq --arg img "$NEW_IMAGE" '
            .taskDefinition as $td
            | (
                {
                  family:                  $td.family,
                  executionRoleArn:        $td.executionRoleArn,
                  networkMode:             $td.networkMode,
                  containerDefinitions: (
                    $td.containerDefinitions
                    | map(if .name=="app" then .image=$img else . end)
                  ),
                  requiresCompatibilities: $td.requiresCompatibilities,
                  cpu:                     $td.cpu,
                  memory:                  $td.memory
                }
              )
            | if $td.taskRoleArn then . + { taskRoleArn: $td.taskRoleArn } else . end
          ' task-def.json > new-task-def.json

      # Register a new revision with the patched JSON
      - name: Register new Task Definition
        id: register
        run: |
          new_arn=$(aws ecs register-task-definition \
            --cli-input-json "file://new-task-def.json" \
            --region "$AWS_REGION" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "NEW_ARN=$new_arn" >> $GITHUB_OUTPUT

      # Point service at the new revision
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "${{ steps.register.outputs.NEW_ARN }}" \
            --force-new-deployment \
            --region "$AWS_REGION"

      # Confirmation
      - name: Confirm deployment
        run: |
          echo "Deployed $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG to $ECS_SERVICE"
