name: CD

on:
  push:
    branches: [main]
    paths:
      - 'app/**'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: false

env:
  AWS_REGION:     ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECR_REGISTRY:      ${{ vars.ECR_REGISTRY }}
  ECS_CLUSTER:    assessment-ecs-cluster
  ECS_SERVICE:    assessment-app-service
  GH_TOKEN:       ${{ secrets.GITHUB_TOKEN }}

permissions:
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.image_tag }}" != "" ]]; then
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            TAG=$(gh run list \
              -R ${{ github.repository }} \
              --workflow CI.yml \
              --branch main \
              --event pull_request \
              --limit 1 \
              --json runNumber,headSha \
              | jq -r '.[0] | "\(.runNumber)-\(.headSha)"')
            echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Render new task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/ecs/task-def.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.tag.outputs.IMAGE_TAG }}

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE }}
          task-definition: ${{ steps.render.outputs.task-definition }}