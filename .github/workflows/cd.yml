name: CD
on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy'
        required: false

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER:   ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE:   ${{ secrets.ECS_SERVICE }}

permissions:
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up GitHub CLI
        uses: actions/setup-gh@v2

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Determine tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # On merge to main, deploy 'latest'
            echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.image_tag }}" != "" ]]; then
            # Manual run with provided tag
            echo "IMAGE_TAG=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            # Fetch tag from the CI run that built PR merged into main
            TAG=$(gh run list \
              -R ${{ github.repository }} \
              --workflow ci.yml \
              --branch main \
              --event pull_request \
              --limit 1 \
              --json runNumber,headSha \
              | jq -r '.[0] | "\(.runNumber)-\(.headSha)"')
            echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          aws-region:    ${{ env.AWS_REGION }}
          cluster:       ${{ env.ECS_CLUSTER }}
          service:       ${{ env.ECS_SERVICE }}
          image:         ${{ env.ECR_REPOSITORY }}:${{ steps.tag.outputs.IMAGE_TAG }}
